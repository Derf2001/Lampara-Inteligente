#include "arduino_secrets.h"
// DHT sensor library - Version: Latest
#include <DHT.h>
#include <DHT_U.h>

// Adafruit NeoPixel - Version: Latest
#include <Adafruit_NeoPixel.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2b81c075-c8ce-4557-b9cb-f2420a9f8b5f

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudColoredLight colorLed;
  CloudSwitch sensor;
  int humedad;
  int temperatura;
  bool button;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <EEPROM.h>

#define S_HOME 0
#define C_VERDE 1
#define C_ROJO 2
#define C_AZUL 3
#define S_SEQ 4
#define S_OFF 5
#define OFF 6

#define EEprom_Size 12

// estados
int state1 =11;
int anterior = S_OFF;
//int color_aterior = 0;
int r_anterior; //cambio, guardar ultimo color con EPROM
int g_anterior;
int b_anterior;
int seq_anterior = 0;
uint8_t state = OFF;

//leds confi
int nleds = 16;
int retardo = 50;
float brillo = 100;
uint8_t r, g, b;
bool on_off = true;


//pines de entrada
int pinled = 5;
int PIRPin = 21;
int BTN_MODO = 4;
int pinSwitch = 33;
#define DHTPin 13
#define DHTType DHT11

//modos
bool buttonState = false;
unsigned long lastButtonPress = 0;
const int tiempoEspera = 1500;
unsigned long tiempoInicio;

Adafruit_NeoPixel tira = Adafruit_NeoPixel(nleds, pinled, NEO_RGB + NEO_KHZ800);
DHT dht11(DHTPin, DHTType);

void FSM_Modos();
void FSM_Control();

void setup() {
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Initialize serial and wait for port to open:
  Serial.begin(9600);

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  pinMode(BTN_MODO, INPUT);
  pinMode(PIRPin, INPUT);
  pinMode(pinSwitch, INPUT);
  //irrecv.enableIRIn();
  tira.begin();
  tira.show();
  dht11.begin();
  colorLed.setSwitch(onoff);
  sensor = true;

  EEPROM.begin(EEprom_Size);
}

void loop() {
  ArduinoCloud.update();

  /*r_anterior = EEPROM.read(0);
  g_anterior = EEPROM.read(1);
  b_anterior = EEPROM.read(2);*/

  // Your code here
  tira.setBrightness(brillo);
  BTN_Control();
  FSM_Color();
  //SensorIR();
  controlLUZ();
  SensorPIR();
  onTemperaturaChange();
  onHumedadChange();

  //Serial.println(digitalRead(pinSwitch));
  onoff2();
}

/*
  Since Button is READ_WRITE variable, onButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onButtonChange() {

}

/*
  Since ColorLed is READ_WRITE variable, onColorLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onColorLedChange()  {
  // Add your code here to act upon ColorLed change
  float bri = colorLed.getBrightness();
  uint8_t r2, g2, b2;
  colorLed.getValue().getRGB(r2, g2, b2);
  onoff(bri, r2, g2, b2);

  if (on_off) {

    //Serial.println("Bri: " + String(bri) + " : Brillo:" + String(brillo));
    if ((r2 != r || g2 != g || b2 != b) && (brillo == bri)) {
      r = r2;
      g = g2;
      b = b2;
      Serial.println("Entro");
      state = 10;
      state1 = 0;
    }
    if (brillo != bri || bri == 100) {
      brillo = bri;
      tira.setBrightness(brillo);
      tira.show();
      state1 = 11;
      lastButtonPress = millis();
    }
    //onoff = colorLed.getSwitch();
    //Serial.println("R:"+String(r)+" G:"+String(g)+ " B:"+String(b));  
  }
}


void cambio() {
  
}



/*
  Since Sensor is READ_WRITE variable, onSensorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSensorChange()  {
  // Add your code here to act upon Sensor change
  state1 = 11;
}

/*
  Since Temperatura is READ_WRITE variable, onTemperaturaChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperaturaChange()  {
  // Add your code here to act upon Temperatura change}
  temperatura = dht11.readTemperature();
}

/*
  Since Humedad is READ_WRITE variable, onHumedadChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumedadChange()  {
  // Add your code here to act upon Humedad change
  humedad = dht11.readHumidity();
}





